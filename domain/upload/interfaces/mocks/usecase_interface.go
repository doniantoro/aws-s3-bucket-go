// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	document "aws-s3-bucket/models/document"
	context "context"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
)

// UsecaseInterface is an autogenerated mock type for the UsecaseInterface type
type UsecaseInterface struct {
	mock.Mock
}

// DownloadFile provides a mock function with given fields: ctx, fileIdentifier
func (_m *UsecaseInterface) DownloadFile(ctx context.Context, fileIdentifier string) (*s3.GetObjectOutput, error) {
	ret := _m.Called(ctx, fileIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 *s3.GetObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*s3.GetObjectOutput, error)); ok {
		return rf(ctx, fileIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *s3.GetObjectOutput); ok {
		r0 = rf(ctx, fileIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBase64 provides a mock function with given fields: ctx, request
func (_m *UsecaseInterface) UploadBase64(ctx context.Context, request document.RequestUploadDocumentBase64) (document.ResponseUploadDocument, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UploadBase64")
	}

	var r0 document.ResponseUploadDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, document.RequestUploadDocumentBase64) (document.ResponseUploadDocument, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, document.RequestUploadDocumentBase64) document.ResponseUploadDocument); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(document.ResponseUploadDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context, document.RequestUploadDocumentBase64) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: ctx, request, file
func (_m *UsecaseInterface) UploadFile(ctx context.Context, request document.RequestUploadDocumentFile, file *multipart.FileHeader) (document.ResponseUploadDocument, error) {
	ret := _m.Called(ctx, request, file)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 document.ResponseUploadDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, document.RequestUploadDocumentFile, *multipart.FileHeader) (document.ResponseUploadDocument, error)); ok {
		return rf(ctx, request, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, document.RequestUploadDocumentFile, *multipart.FileHeader) document.ResponseUploadDocument); ok {
		r0 = rf(ctx, request, file)
	} else {
		r0 = ret.Get(0).(document.ResponseUploadDocument)
	}

	if rf, ok := ret.Get(1).(func(context.Context, document.RequestUploadDocumentFile, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, request, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecaseInterface creates a new instance of UsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecaseInterface {
	mock := &UsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
